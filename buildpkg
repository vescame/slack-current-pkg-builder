#!/bin/sh
set -e

installpkg=/sbin/installpkg
printf=`which printf`

log() {
    $printf "%s\n" "$1"
}

verifyInstalled() {
    local _prefix=/var/log/packages

    local version=`sh -c ". ./$1.info && echo \\$VERSION"`
    local prog=`sh -c ". ./$1.info && echo \\$PRGNAM"`

    if [ -f "$_prefix/$prog-$version*_SBo" ]; then
        return 1
    fi

    return 0
}

install() {
    local _prefix=/tmp
    local version=`grep '^VERSION' $1.info | cut -d'=' -f2 | tr -d '"'`
    local prog=`grep '^PRGNAM' $1.info | cut -d'=' -f2 | tr -d '"'`
    $installpkg "$_prefix/$prog-$version*_SBo*"
}

findDependencies() {
    local pkgname="`basename $1`"

    local deps="`grep "REQUIRES" $1/${pkgname}.info | cut -d '\"' -f2`"

    # if has no deps, then return 0 and compile
    if [ ! -z "$deps" ]; then
        log "Dependencies: $deps"
        for i in $deps
        do
            local depspath="`find . -name "$i" -type d`"

            if [ -z "$depspath" ]; then
                log "package not found: $i"
                log "please, check manualy"
                exit 1
            else
                tryBuild $depspath
            fi
        done
    fi

    return 0
}

build() {
    cd $1

    local pkgname="`basename $1`"

    verifyInstalled $pkgname

    if [ $? -eq 0 ]; then
        local urlx86=`sh -c ". ./$pkgname.info && echo \\$DOWNLOAD"`
        local urlx8664=`sh -c ". ./$pkgname.info && echo \\$DOWNLOAD_x86_64"`
        local url=''
        # x86_64 empty?
        if [ -z "$urlx8664" ]; then
                url=$urlx86
        else
            # x86_64 unsupported?
            if [ "$urlx8664" == "UNSUPPORTED" ]; then
                url=$urlx86
            else
                url=$urlx8664
            fi
        fi
        local dlname=`basename $url`
        if [ ! -f "$dlname" ]; then
            wget $url
        fi
        sh -x $pkgname.SlackBuild
        install $pkgname
    fi
    cd $cwd
}

tryBuild() {
    log "Trying to build: $1"
    findDependencies $1
    local hasdeps=$?
    if [ $hasdeps -eq 0 ]; then
        build $1
        return 0
    else
        log "Couldn't build: $1"
        return 1
    fi
}

if [ $# -ne 1 ]; then
    log "usage: $0 package_relative_path"
    exit 1
fi

if [ `id -u` -ne 0 ]; then
    log "please, run as root"
    exit 2
fi

_pkgname="`basename $1`"

if [ -L "$0" ]; then
    cwd="`realpath $(dirname $0)`"
else
    cwd="`dirname $(realpath $0)`"
fi

tryBuild $1

# vim: et sw=4 ts=4 sts=4 ff=unix :
